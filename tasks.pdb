:- use_module(library(clpfd)).
%nat(z).
%nat(s(X)) :- nat(X).

% my solutions
% ----------------------------------------
sum4(z,A,A).
sum4(s(X), Y, s(Z)) :- sum4(X, Y, Z).

nod2(A, A, A).
nod2(A, B, C) :- A #> B, N #= A - B, nod2(B, N, C).
nod2(A, B, C) :- B #> A, N #= B - A, nod2(A, N, C).

nod3(A, A, A, 1, 0).
nod3(A, B, C, U, V) :- A #> B, N #= A - B, nod3(N, B, C, U, V1), V #= V1 - U.
nod3(A, B, C, U, V) :- B #> A, nod3(B, A, C, V, U).
%N #= B - A, nod3(A, N, C, U1, V1), V #= V1, U #= U1 - V1.

fib3(0, 0).
fib3(1, 1).
fib3(N, Y) :- N #> 1, N1 #= N - 1, N2 #= N - 2, fib3(N1, Y1), fib3(N2, Y2), Y #= Y1 + Y2.

fact3(0, 1).
fact3(N, Y) :- N #> 0, N1 #= N - 1, fact3(N1, Y1), Y #= Y1 * N. 

fib4(0, 0, 0).
fib4(1, 1, 0).
fib4(N, Y1, Y2) :- N #> 1, N1 #= N - 1, fib4(N1, Y2, Y3), Y1 #= Y2 + Y3.

mem3(X, [X | _]).
mem3(X, [_ | L]) :- mem3(X, L).

cat3([], B, B).
cat3([H | T], B, [H | L]) :- cat3(T, B, L).

%wrong subseq.
subseq3([],[]).
subseq3([H | T], S) :- cat3(C, _, [H | T]), cat3(_, S, C).

%correct subseq.
subseq4([],[]).
subseq4([H | T], [H | L]) :- subseq4(T, L).
subseq4([_ | T], L) :- subseq4(T, L).

%WHY DO YOU NOT WORK?
%not_all_subseq([],[]) :- false.
not_all_subseq([H | T], S) :- subseq4([H | T], X), mem3(X, S).
allSubseq([],[]).
allSubseq(L, S) :- not(not_all_subseq(L, S)).

len3([], 0).
len3([_ | T], N) :- len3(T, N1), N #= 1 + N1.

perm3([],[]).
perm3([H | T], P) :- perm3(T, P1), cat3(A, B, P1), cat3(A, [H | B], P).

is_sorted2([]).
is_sorted2([_]).
is_sorted2([H, B | T]) :- H #=< B, is_sorted2([B | T]).

sort3(L, S) :- perm3(L, S), is_sorted2(S).

merge3([], B, B).
merge3(A, [], A).
merge3([H | T], [H1 | T1], [H | S]) :- H #=< H1, merge3(T, [H1 | T1], S).
merge3([H | T], [H1 | T1], [H1 | S]) :- H1 #< H, merge3([H | T], T1, S).

split3([], [], []).
split3([H | T], [H | S1], S2) :- split3(T, S2, S1).

merge_sort3([],[]).
merge_sort3([A],[A]).
merge_sort3([H, L | T], S) :- split3([H, L | T], S1, S2),
                           merge_sort3(S1, L1),
                           merge_sort3(S2, L2),
                           merge3(L1, L2, S).

%mult_pol3([],[],[]).

sum_pol3(A, [], A).
sum_pol3([], [H | T], [H | T]).
sum_pol3([H | T], [H1 | T1], [HeadSum | SumTail]) :- HeadSum #= H + H1, sum_pol3(T, T1, SumTail).

mult_num_with_pol(0, [_ | _], []).
mult_num_with_pol(_, [], []).
mult_num_with_pol(N, [H | T], [H1 | S]) :- N #> 0, H1 #= H * N, mult_num_with_pol(N, T, S).
% За mult_pol виж решението на Герджиков. Общо взето реших, че ме мързи да го пиша. Идеята
% я схванах така или иначе.

is_not_path3(E, P) :- cat3(_, [U, V | _], P), not(mem3([U, V], E); mem3([V, U], E)).
is_path3(E, P) :- not(is_not_path3(E, P)).

%all_edges_not_in_path3(V, P) :- mem3(X, V), not(mem3(X, P)).
%is_hamilton3(V, E, P) :- is_path3(E, P), not(all_edges_not_in_path3(V, P)).

gen_hamilton(V, E, P) :- perm3(V, P), is_path3(E, P).

is_not_clique3([V, E]) :- mem3(X, V), mem3(Y, V), Y #\= X, not(is_edge(X, Y, E)). 
is_clique3([V, E]) :- not(is_not_clique3([V, E])).

gen_clique3([V, E], C) :- subseq4(V, C), is_clique3([C, E]).

subset3([], _).
subset3([H | T], L) :- mem3(H, L), subset3(T, L).

is_not_max_subset_clique3([V, E], C) :- gen_clique3([V, E], C1),
                                        subset3(C, C1), not(subset3(C1, C)).
is_max_subset_clique3([V, E], C) :- not(is_not_max_subset_clique3([V, E], C)).

gen_max_subset_clique3([V, E], C) :- gen_clique3([V, E], C), is_max_subset_clique3([V, E], C).

is_not_max_size_clique3([V, E], C) :- gen_clique3([V, E], C1), len3(C1, N1), len3(C, N), N #< N1.
is_max_size_clique3([V,E], C) :- not(is_not_max_size_clique3([V,E], C)).
gen_max_size_clique3([V, E], C) :- gen_clique3([V, E], C), is_max_size_clique3([V, E], C).

natural3(0).
natural3(X) :- X #> 0, X1 #= X - 1, natural3(X1).

in_range3(K, L, Y) :- K #=< Y, Y #=< L, natural3(Y).

colour(L, C, [Col, L]) :- Col #=< C, natural3(Col).
colour_array([], _, []).
colour_array([H | T], C, [Col | ColT]) :- colour(H, C, Col), colour_array(T, C, ColT).

is_not_colouring(E, Col) :- mem3([Col1, Val1], Col), mem3([Col1, Val2], Col),
                            Val1 #\= Val2, is_edge(Val1, Val2, E).

%Това е решението на Герджиков, което определено е по-бързо, но и моето работи
is_not_colouring_fast(E, Col) :- mem3([U, V], E),
                                 mem3([Col1, U], Col), mem3([Col1, V], Col).

is_colouring(E, Col) :- not(is_not_colouring_fast(E, Col)).

gen_colouring([V, E], Col) :- len3(V, MaxCol), colour_array(V, MaxCol, Col), is_colouring(E, Col).

gen_colouring2([V, E], C, Col) :- colour_array(V, C, Col), is_colouring(E, Col).

is_not_min_colouring(G, Col) :- gen_colouring(G, Col1), len3(Col1, N1), len3(Col, N), N #< N1.
is_not_min_colouring2(G, C) :- C1 #= C - 1, gen_colouring2(G, C1, _).

is_min_colouring2(G, C) :- not(is_not_min_colouring2(G, C)), gen_colouring2(G, C, _).
is_min_colouring(G, Col) :- not(is_not_min_colouring(G, Col)).

gen_min_colouring2([V, E], C) :- len3(V, L), in_range3(0, L, C),
                                 is_min_colouring2([V, E], C).

gen_min_colouring(G, Col) :- gen_colouring(G, Col), is_min_colouring(G, Col).

diag(Cap, [X , Y]) :- Y #= Cap - X, in_range3(0, Cap, X).

all_diag([X, Y]) :- natural3(Z), diag(Z, [X, Y]).

pow3(_, 0, 1).
pow3(X, Y, S) :- Y #> 0, S #= X * T, Y1 #= Y - 1, pow3(X, Y1, T).

%pairs(N, [0, K]) :- N mod 2 #= 0, 
%pairs(N, [M, K]) :- all_diag([M, K]), pow3(2, M, Pow), N #= Pow * (2 * K + 1) - 1. 

pair(N, 0, K) :- N mod 2 #= 1, N #= 2*K + 1.
pair(N, M, K) :- N mod 2 #= 0, N #> 0, N #= 2 * N1, M #= M1 + 1, pair(N1, M1, K).

gen_all_pairs(M, K) :- natural3(Z), pair(Z, M, K).

gen_seq_fixed_length_sum(0, 0, []).
gen_seq_fixed_length_sum(Len, A, [B | L]) :- Len #> 0, in_range3(0, A, B), A1 #= A - B,
                                Len1 #= Len - 1, gen_seq_fixed_length_sum(Len1, A1, L).

gen_seq_natural(Z) :- gen_all_pairs(Len, A), gen_seq_fixed_length_sum(Len, A, Z).

gen_nat_range(0, [0]).
gen_nat_range(N, [N | T]) :- N #> 0, N1 #= N - 1, gen_nat_range(N1, T).

%Generate all sets of natural numbers lesser or equal to N
gen_set(0, []).
gen_set(N, X) :- N #> 0, N1 #= N - 1, gen_nat_range(N1, T), subseq4(T, X), mem3(N1, X).

gen_all_set(X) :- natural3(N), gen_set(N, X).

%Gergikov implementation
gen_sets_max_el(0, []).
gen_sets_max_el(M, [M1 | S]) :- M #> 0, M1 #= M - 1, in_range3(0, M1, M2), gen_sets_max_el(M2, S).

gen_finite_sets(S) :- natural(N), gen_sets_max_el(N, S).

map_set_to_edges([],[]).
map_set_to_edges([N | S], [[U, V] | E]) :- diag(N, [U, V]), map_set_to_edges(S, E).

modulus(M, Z) :- natural(N), Z #= N mod M.

% deer
move([], _, _, []).
move([S | T], [1 | IsMoving], [P | Pos], [NP | NPos]) :- NP #= P + S, 
        move(T, IsMoving, Pos, NPos).
move([_ | T], [0 | IsMoving], [P | Pos], [P | NPos]) :-  move(T, IsMoving, Pos, NPos).

swapMove([], _, _, _,[]).
swapMove([0 | IM], [P | Pos], MaxPos, MinPos, [1 | NewState]) :- 
    P #= MinPos, 
    swapMove(IM, Pos, MaxPos, MinPos, NewState).
swapMove([0 | IM], [P | Pos], MaxPos, MinPos, [0 | NewState]) :-
    P #\= MinPos, swapMove(IM, Pos, MaxPos, MinPos, NewState).

swapMove([1 | IM], [P | Pos], MaxPos, MinPos, [1 | NewState]) :-
    (P #\= MaxPos ; MaxPos #= MinPos), swapMove(IM, Pos, MaxPos, MinPos, NewState).

swapMove([1 | IM], [P | Pos], MaxPos, MinPos, [0 | NewState]) :-
    P #= MaxPos, MaxPos #\= MinPos, swapMove(IM, Pos, MaxPos, MinPos, NewState).

maxPos([], 0).
maxPos([H | T], H) :- maxPos(T, N), N #< H.
maxPos([H | T], N) :- maxPos(T, N), N #>= H.

minPos([K], K).
minPos([H | T], H) :- minPos(T, N), H #< N.
minPos([H | T], N) :- minPos(T, N), N #=< H.

distance_with_n_steps(_, 0, [1, 1, 1, 1], [0, 0, 0, 0]).
distance_with_n_steps(V, N, IsMoving, NPos) :-
    N #> 0, N1 #= N - 1, distance_with_n_steps(V, N1, ShouldMove, Pos),
    move(V, ShouldMove, Pos, NPos), maxPos(NPos, MaxPos), minPos(NPos, MinPos),
    swapMove(ShouldMove, NPos, MaxPos, MinPos, IsMoving).

d(V,X) :- natural3(N), distance_with_n_steps(V, N, _, X).

%-------------------------------------------------

diag2(X,Y, N) :-  X #=< N, Y #= N - X, natural(X).

% Term generator
% Generates lengths of subterms
tuple_n(0, 0, []).
tuple_n(L, A, [H | T]) :- L #> 0, L1 #= L - 1, A #> 0,
    in_range3(1, A, H), A1 #= A - H, tuple_n(L1, A1, T). 

% Map term lengths to terms
gen_terms_from_length_array(_, [], []).
gen_terms_from_length_array(FS, [L | LS], [T | TS]) :-
    gen_term_n(FS, L, T), gen_terms_from_length_array(FS, LS, TS).

% Generate terms with length n
% Term format [f, a], [f, [f, a]], [g, [f, a], b]
gen_term_n(_, 0, []).
gen_term_n(L, 1, [T]) :- mem3([T, 0], L).
gen_term_n(L, N, [F | TS]) :- N #> 1, in_range3(1, N, Arity), N1 #= N - 1, mem3([F, Arity], L),
    tuple_n(Arity, N1, LS), gen_terms_from_length_array(L, LS, TS).

gen_term(L, T) :- natural3(N), gen_term_n(L, N, T).

mem4(X, [X | _]).
mem4(X, [H | T]) :- H \= X, mem4(X, T).

cycl(A, L) :- natural3(N), gen_cycl(A, N, L).

gen_cycl(A, N, L) :- gen_list(A, N, L), is_cycl(A, L).

gen_list(_, 0, []).
gen_list(A, N, [H | T]) :- N #> 0, mem3(H, A), N1 #= N - 1, gen_list(A, N1, T).

is_cycl(A, L) :- cat3([H | U], _, L), length(L, Len), 0 #< SLen, SLen #=< Len, natural3(SLen),
            Len mod SLen #= 0, gen_list(A, SLen, S), K #= Len div SLen, catk(S, K, [H | U]).

catk(_, 0, []).
catk(S, K, U) :- K #> 0, K1 #= K - 1, catk(S, K1, U1), cat3(U1, S, U).

%is_even([]).
%is_even([[Col, _] | T]) :- (Col #= 2; Col #= 4; Col #= 0), is_even(T).
%colour_test(L, C, S) :- colour_array(L, C, S), not(is_even(S)).
% ---------------------------------------------------------------------------






























sum1(X,z,X).
sum1(X,s(Y),s(Z)) :- sum1(X,Y,Z).


nod(A, 0, A).
nod(0, B, B).
nod(A, B, D) :- A = B, D = A.
nod(A, B, D) :- A < 0, nod(-A,B,D).
nod(A, B, D) :- B < 0, nod(A,-B,D).
nod(A, B, D) :- A > B, A1 is A - B, nod(A1, B, D). 
nod(A, B, D) :- B > A, B1 is B - A, nod(A, B1, D).


%exponential fibonachi
fib(0,0).
fib(1,1).
fib(N, F) :- N #>= 2, N1 #= N - 1, N2 #= N - 2, F #= F1 + F2, fib(N1, F1), fib(N2, F2).

%non-exponential fibonachi(fast fib)
%ffib(N, F, Fnext)
ffib(0, 0, 1).
ffib(N, F, Fnext) :- N #> 0, Fprev #= Fnext - F, N1 #= N - 1, ffib(N1, Fprev, F).

%fact
fact(0, 1).
fact(N, F) :- N #> 0, N1 #= N - 1, F #= F1 * N, fact(N1, F1). 

%lists
%mem2(X,[X]). taken care of below
mem2(X, [X | _]).
mem2(X, [_ | T]) :- mem2(X, T).
%we can use the above definition to go through the element of L with mem2(X,[1,2,3,4,5]) for example

cat2([], B, B).
cat2([X | A1], B, [X | C1]) :- cat2(A1, B, C1).
%cat2(A,B,[1,2,3]) also works


%subset:
subset([], []).
subset([_ | L1], S1) :- subset(L1, S1).
subset([A | L1], [A | S1]) :- subset(L1, S1).

perm([],[]).
perm([A1 | L1], P) :- perm(L1,Pp), cat2(P1, P2, Pp), cat2(P1, [A1 | P2], P).

is_sorted([]).
is_sorted([_]).
is_sorted([A, B | L]) :- A #=< B, is_sorted([B|L]).
sort2(L,S) :- perm(L, S), is_sorted(S).

merge([], Y, Y).
merge([X1 | X], [], [X1 | X]).
merge([X1 | X], [Y1 | Y], [Y1 | Z]) :- Y1 #=< X1, merge([X1 | X], Y, Z).
merge([X1 | X], [Y1 | Y], [X1 | Z]) :- X1 #< Y1, merge(X, [Y1 | Y], Z).

split([], [], []).
split([A], [A], []).
split([A, B | L], [A | L1], [B | L2]) :- split(L, L1, L2).

merge_sort([], []).
merge_sort([A], [A]).
merge_sort([A, B | L], S) :- split([A, B | L], L1, L2), merge_sort(L1, S1), merge_sort(L2, S2), merge(S1, S2, S).

%Week9
%sum(F,G,S)
sum_pol([], G, G).
sum_pol([F0 | F], [], [F0 | F]).
sum_pol([F0 | F], [G0 | G], [S0 | S]) :- S0 #= F0 + G0, sum_pol(F,G,S).
%sum_pol([F0 | F], [G0 | G], [F0 + G0 | S]) :- sum_pol(F,G,S). this is wrong. F0+G0 is not calculated

%mult_const(A,F,G)
mult_const(_, [], []).
mult_const(A, [F0 | F], [G0 | G]) :- G0 #= A * F0, mult_const(A, F, G).

merge_pol(L, [], L).
merge_pol([], [A | L2], [A | L2]).
merge_pol([A | L1], [B | L2], [A, B | L]) :- merge_pol(L1, L2, L).

mult_pol([F0], G, H) :- mult_const(F0, G, H).
mult_pol([F0, F1 | F], [G0], H) :- mult_const(G0, [F0, F1 | F], H).
mult_pol([F0, F1 | F], [G0, G1 | G], H) :- split([F0, F1 | F], Feven, Fodd),
    split([G0, G1 | G], Geven, Godd),
    sum_pol(Feven, Fodd, Fsum),
    sum_pol(Geven, Godd, Gsum),
    mult_pol(Fsum, Gsum, Hsum),
    mult_pol(Feven, Geven, Heven1),
    mult_pol(Fodd, Godd, Heven2),
    mult_pol(-1, Heven1, Hneg1),
    mult_pol(-1, Heven2, Hneg2),
    sum_pol(Hsum, Hneg1, Hoddtmp),
    sum_pol(Hoddtmp, Hneg2, Hodd),
    sum_pol(Heven1, [0 | Heven2], Heven),
    sum_pol(Heven, Hodd, H).

len([], 0).
len([_ | L], N) :- N #= N1 + 1, len(L, N1).

%Graphs
is_edge(U,V,E) :- mem2([U,V],E).
is_edge(U,V,E) :- mem2([V,U],E).

is_not_path(P, E) :- cat2(_, [U,V|_], P), not(is_edge(U,V,E)).
is_path(P,E) :- not(is_not_path(P,E)).

is_hamilton([V,E],P) :- perm(V,P), is_path(P,E).

is_not_clique(E,C) :- cat2(_,[U|C1], C), cat2(_,[V|_],C1), not(is_edge(U,V,E)).
is_clique(E,C) :- not(is_not_clique(E,C)).
gen_clique([V,E],C) :- subset(V,C), is_clique(E,C).

is_not_max_size_clique(G,C1) :- gen_clique(G,C2), len(C1,N1), len(C2,N2), N1 #< N2.
is_max_size_clique(G,C) :- not(is_not_max_size_clique(G,C)).
gen_max_size_clique(G,C) :- gen_clique(G,C), is_max_size_clique(G,C).

is_subset([],_).
is_subset([A|C1],C2) :- mem2(A,C2), is_subset(C1,C2).
%If the first element we give is_subset is X so is_subset(X,[1,2,3]) this
%will generate only the first number [], [1], [1,1], [1,1,1],,,,,, 

is_not_max_subset_clique(G,C1) :- gen_clique(G,C2), is_subset(C1,C2), not(is_subset(C2, C1)).
is_max_subset_clique(G,C) :- not(is_not_max_subset_clique(G,C)).
gen_max_subset_clique(G,C) :- gen_clique(G,C), is_max_subset_clique(G,C).

natural(0).
natural(X) :- X #> 0, X #= X1 + 1, natural(X1).


%gen_pairs_diag(X, Y, N) :- in_range(0, N, X), Y #= N - X.
%gen_pairs(X, Y) :- natural(N), gen_pairs_diag(X, Y, N).
%
%pair(N, 0, K) :- N mod 2 #= 1, N #= 2*K + 1.
%pair(N, M, K) :- N mod 2 #= 0, N #> 0, N #= 2 * N1, M #= M1 +1, pair(N1, M1, K).
%gen_all_pair(M, K) :- natural(N), pair(N + 1, M, K).
%N + 1 in the above because the 0 does not have a pair number
